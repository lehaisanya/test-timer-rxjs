{"version":3,"sources":["services.ts","utils.ts","App.tsx","hooks.ts","index.tsx"],"names":["Actions","fill2char","str","length","action$","Subject","wait$","doubleClick$","pipe","timeInterval","mergeMap","value","interval","of","EMPTY","throttleTime","mapTo","PAUSE","timer$","merge","distinctUntilChanged","switchMap","action","RESET","START","startWith","scan","time","inc","map","seconds","timeWithoutSeconds","Math","floor","minuts","hours","timerService","observable","start","next","stop","reset","wait","App","obs$","useState","state","setState","useEffect","sub","subscribe","unsubscribe","useObservable","className","onClick","ReactDOM","render","document","getElementById"],"mappings":"yJAUKA,E,iJCVCC,EAAY,SAACC,GACf,OAAOA,EAAIC,OAAS,EAAI,IAAMD,EAAMA,I,SDSnCF,O,iBAAAA,I,iBAAAA,I,kBAAAA,M,KAML,IAAMI,EAAU,IAAIC,IACdC,EAAQ,IAAID,IAEZE,EAAeD,EAAME,KACvBC,cACAC,aAAS,gBAAGC,EAAH,EAAGA,MAAH,SAAUC,UAbH,IAa4CC,YAAGF,GAASG,OACxEC,YAdgB,KAehBC,YAAMhB,EAAQiB,QAGZC,EAASC,YACXf,EACAG,GACFC,KACEY,cACAC,aAAU,SAAAC,GACN,OAAQA,GACJ,KAAKtB,EAAQuB,MAAO,OAAOV,aAAI,GAC/B,KAAKb,EAAQwB,MAAO,OAAOZ,YAAS,KAAMJ,KAAKQ,YAAM,IACrD,KAAKhB,EAAQiB,MAAO,OAAOJ,YAAG,OAGtCY,YAAU,GACVC,aAAK,SAACC,EAAMC,GAAP,OAAeA,EAAM,EAAI,EAAID,EAAOC,KACzCC,aCpCsB,SAACF,GACvB,IAAMG,EAAU7B,EAAU,GAAD,OAAI0B,EAAO,KAC9BI,EAAqBC,KAAKC,MAAMN,EAAO,IACvCO,EAASjC,EAAU,GAAD,OAAI8B,EAAqB,KAC3CI,EAAQlC,EAAU,GAAD,OAAI+B,KAAKC,MAAMF,EAAqB,MAE3D,MAAM,GAAN,OAAUI,EAAV,cAAqBD,EAArB,cAAiCJ,ODiCxBM,EAAe,CACxBC,WAAY,kBAAMnB,GAClBoB,MAAO,WACHlC,EAAQmC,KAAKvC,EAAQwB,QAEzBgB,KAAM,WACFpC,EAAQmC,KAAKvC,EAAQiB,OACrBb,EAAQmC,KAAKvC,EAAQuB,QAEzBkB,MAAO,WACHrC,EAAQmC,KAAKvC,EAAQuB,OACrBnB,EAAQmC,KAAKvC,EAAQwB,QAEzBkB,KAAM,WACFpC,EAAMiC,S,OEpDRrB,EAASkB,EAAaC,aAoBbM,EAlBH,WACR,IAAMhB,ECLmB,SAAIiB,GAAyB,IAAD,EAC3BC,qBAD2B,mBAC9CC,EAD8C,KACvCC,EADuC,KAQrD,OALAC,qBAAU,WACN,IAAMC,EAAML,EAAKM,UAAUH,GAC3B,OAAO,kBAAME,EAAIE,iBAClB,CAACP,IAEGE,EDHMM,CAAclC,GAE3B,OACI,qBAAKmC,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,QAAf,SAAwB1B,IACxB,sBAAK0B,UAAU,UAAf,UACI,wBAAQA,UAAU,QAAQC,QAASlB,EAAaE,MAAhD,mBACA,wBAAQe,UAAU,OAAOC,QAASlB,EAAaI,KAA/C,kBACA,wBAAQa,UAAU,OAAOC,QAASlB,EAAaM,KAA/C,kBACA,wBAAQW,UAAU,QAAQC,QAASlB,EAAaK,MAAhD,4B,MEZpBc,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bf59e543.chunk.js","sourcesContent":["import { interval, of, Subject, merge, EMPTY } from \"rxjs\"\r\nimport {\r\n    distinctUntilChanged, map, mapTo, mergeMap, scan,\r\n    startWith, switchMap, tap, throttleTime, timeInterval\r\n} from \"rxjs/operators\"\r\n\r\nimport { formatTime } from \"utils\"\r\n\r\nconst DUBLE_CLICK = 300\r\n\r\nenum Actions {\r\n    START,\r\n    PAUSE,\r\n    RESET\r\n}\r\n\r\nconst action$ = new Subject<Actions>()\r\nconst wait$ = new Subject()\r\n\r\nconst doubleClick$ = wait$.pipe(\r\n    timeInterval(),\r\n    mergeMap(({ value, interval }) => interval <= DUBLE_CLICK ? of(value) : EMPTY),\r\n    throttleTime(DUBLE_CLICK),\r\n    mapTo(Actions.PAUSE)\r\n)\r\n\r\nconst timer$ = merge(\r\n    action$,\r\n    doubleClick$\r\n).pipe(\r\n    distinctUntilChanged(),\r\n    switchMap(action => {\r\n        switch (action) {\r\n            case Actions.RESET: return of(-1)\r\n            case Actions.START: return interval(1000).pipe(mapTo(1))\r\n            case Actions.PAUSE: return of(0)\r\n        }\r\n    }),\r\n    startWith(0),\r\n    scan((time, inc) => inc < 0 ? 0 : time + inc),\r\n    map(formatTime)\r\n)\r\n\r\nexport const timerService = {\r\n    observable: () => timer$,\r\n    start: () => {\r\n        action$.next(Actions.START)\r\n    },\r\n    stop: () => {\r\n        action$.next(Actions.PAUSE)\r\n        action$.next(Actions.RESET)\r\n    },\r\n    reset: () => {\r\n        action$.next(Actions.RESET)\r\n        action$.next(Actions.START)\r\n    },\r\n    wait: () => {\r\n        wait$.next()\r\n    }\r\n}\r\n","const fill2char = (str: string) => {\r\n    return str.length < 2 ? '0' + str : str\r\n}\r\n\r\nexport const formatTime = (time: number): string => {\r\n    const seconds = fill2char(`${time % 60}`)\r\n    const timeWithoutSeconds = Math.floor(time / 60)\r\n    const minuts = fill2char(`${timeWithoutSeconds % 60}`)\r\n    const hours = fill2char(`${Math.floor(timeWithoutSeconds / 60)}`)\r\n    \r\n    return `${hours} : ${minuts} : ${seconds}`\r\n}\r\n","import React from 'react'\n\nimport { useObservable } from 'hooks'\nimport { timerService } from 'services'\n\nconst timer$ = timerService.observable()\n\nconst App = () => {\n    const time = useObservable(timer$)\n\n    return (\n        <div className=\"app\">\n            <div className=\"container\">\n                <div className=\"timer\">{time}</div>\n                <div className=\"buttons\">\n                    <button className=\"start\" onClick={timerService.start}>Start</button>\n                    <button className=\"stop\" onClick={timerService.stop}>Stop</button>\n                    <button className=\"wait\" onClick={timerService.wait}>Wait</button>\n                    <button className=\"reset\" onClick={timerService.reset}>Reset</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import { useEffect, useState } from \"react\"\r\nimport { Observable } from \"rxjs\"\r\n\r\nexport const useObservable = <T>(obs$: Observable<T>) => {\r\n    const [state, setState] = useState<T>()\r\n\r\n    useEffect(() => {\r\n        const sub = obs$.subscribe(setState)\r\n        return () => sub.unsubscribe()\r\n    }, [obs$])\r\n\r\n    return state\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}